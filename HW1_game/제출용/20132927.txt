--- 보고서 ---
1. 문제 정의  -  문제 상황.
내가 풀 문제를 정의. 만들 기능 정의
2. 프로그램 설계  -  해결. 
위 정의를 바탕으로 어떻게 구현할 것인지 구체적인 방안 제시. 

------------------------------------------------------------
0. 서론. 

-> 문제 상황 
카드 매칭 게임 만들기. 

--- 서론 ---
누구나 한번쯤, 카드 맞추기 게임을 해본 적이 있을 것이다. 카드 두 개의 모양이 똑같고, 이런 쌍이 여러장 뒤집혀 있다.
앞 면을 모른채, 두 명이 번갈아 카드를 두 장씩 앞면으로 뒤집어 확인한다. 그리고 두 장이 똑같은 모양이면 점수를 얻고
그대로 앞면으로 둔다. 두 카드가 모양이 다르면 다시 뒷면으로 둔다. 그리고 모든 카드가 앞면이 되면 게임은 종료된다.
이런 게임은 누구나 한번 쯤 해보았을 것이다. 이번 과제에서는 이 게임을 콘솔에서 구현해 본다. 
---

게임은 다음과 같은 구성을 가진다.

- 16장의 카드 사용. 1번부터 8번까지의 숫자카드가 각각 2장씩 존재함.
- 게임을 시작하면 16장의 카드를 무작위로 섞어 4 X 4 로 배치한 후, 뒷면이 보이게 둠.
- 두 플레이어가 번갈아가며 카드를 두 장씩 선택하여 확인함. 만약 동일한 숫자가 나올 경우, 
1점을 획득하며 해당 카드는 앞면이 보이게 둠.
- 모든 카드쌍을 찾으면, 두 플레이어의 점수를 보여주며 게임 종료.
- 특별규칙: 7번 카드쌍은 2점.

우리가 이미 알고 있는 카드 매칭 게임과 거의 똑같다. 다만, 다른 카드를 골랐을 경우 다시 앞면으로 뒤집지 않는다.
이것은 콘솔이라는 환경때문으로 보인다. 뒤집어봤자 앞선 결과가 그대로 보이기 때문에 다시 앞면으로 돌려 놓는 것이 의미가 없다.
물론, 화면은 모두 지우고 다시 출력할 수도 있지만, 이번 과제에서 거기까지는 생각하지 않고 진행하기로 한다.

그리고 다음과 같은 제약 사항을 가진다. 

- 카드의 위치는 행과 열을 표현한 두개의 정수로 입력받는다. 
- 카드의 앞면은 1~8 숫자, 뒷면은 x로 표시한다. 
- 카드 배치는 고정 배치와 무작위 배치 버전 모두를 지원한다.

여기까지가 게임 구현을 위한 요구 조건이다. 이제 본격적으로 게임을 만들어 보겠다.

-----
1. 문제 정의 

먼저, 게임은 다음과 같이 진행된다.  /// 구성.

문제 상황, 문제 정의. '->' 앞에  적힌 게 문제 상황. 뒤에 적힌게 해결 방법.
문제 상황과 해결 방법 분리.

게임 진행 - 한번의 턴은 다음과 같이 진행된다.   ---- 이 게임 진행을 위해 게임 메니저 객체를 만든다!
입력 받기 전 필요한 화면을 출력한다. (보드판, 입력 메세지)
카드의 위치를 입력 받는다. 
두 개의 카드가 같은지 다른지 확인하고 각 상황에 맞는 처리를 한다. 
모든 카드가 앞면이 될 때 까지 이 과정을 반복한다. 

-> 게임 매니저 객체의 메소드를 각각 설명하면서 위의 게임 진행을 어떻게 구현했는지 설명, 이렇게 구현해서 해결했따! 라고. 

턴 관리 
- 턴마다 달라지는 정보를 반영하고, 매턴 종료 조건을 만족시키는지 확인해야 한다. 

점수 관리 -> User를 만든다!!!
- 두 명의 유저 정보를 따로 관리 한다. 두 유저를 식별할 수 있어야 한다. 
- 정답을 맞추면 1점, 7이 적힌 카드인 경우에는 2점이 올라야 한다. 


입력 받기 - 입력 값을 위치 값으로 추출하는 기능. -> CardLocation을 만들어 입력값을 관리한다!!
- 두개의 정수로 입력 받고 이를 유효한 좌표값으로 추출해서 가지고 있어야 한다. 

카드 비교와 출력 동시 해결 
- > 카드 관리자와 보드 관리자. 카드의 앞면 데이터를 가진 객체와 이 객체의 정보를 활용하여 출력을 조절하는 객체를 만든다!
-> 앞면관리자는 게임이 끝날 때 까지 값을 계속 유지한 채로 가지고 있는다. 
-> 오로지 변하는 것은 출력 값. 출력되는 보드 판은 정답이 발생할 때 마다 바뀐다. 그리고 게임보드 출력은 이 보드 데이터만 그대로 출력하면 된다.
    카드 비교 하기. 
    - 사용자가 똑같은 카드를 선택했는지, 다른 카드를 선택했는지 확인해야 한다. -> 카드 관리자 객체로부터 앞면 정보를 받아와 비교하기만 하면 끝.

    카드 출력 
    - 출력 형식에 맞게, 선택된 카드는 앞면으로 바꾸어 출력한다. 
    - 정답으로 인정된 카드는 다음부터 계속 앞면으로 유지 한다. 

    고정 배치, 무작위 배치 카드 관리  -> 카드 관리 매니저로. 처음에 입력값을 
    - 처음 시작할 때 고정배치를 사용할지 무작위 배치를 사용할지 결정하여 반영한다. 
    - 무작위 모드인 경우 카드 배치가 무작위가 되도록 충분히 섞는다. 


오류 -> 
1. 범위 내 입력, 2. 정답 카드 선택.  -> 오류 시 재 선택 기회 제공한다.
-> 입력 받은 코드에서 어케 처리했는지 설명. 


------
2. 프로그램 설계.

이러한 문제 상황을 해결하기 위해 역할을 분담하여 클래스를 구성해보았다. 

--- 구성. 
User - 유저 식별, 유저의 점수 유지.
CardLocation - 입력 받은 값 추출, 저장.
CardManager - 카드의 앞면 저장. 고정 배치와 무작위 배치 지원
BoardManager - 화면에 출력되는 카드 관리. 앞면으로 뒤집었을 때 그 두 카드가 같은지 여기서 확인.
GameManager - 한 턴 안에서 게임이 진행되는 과정을 관리. 입력 받고, 점수 매기고 출력하는 등 게임 진행 총괄. 
----
이 클래스로 위에서 정의한 문제들을 해결해보겠다.


---> 쭉 설명

3. 구현 최종 확인. 구현 완료. 배점 별로 잘되는지 설명. 

2.5점 고정 배치로 게임 기능 정상 작동
1점 무작위 배치 기능
-> 처음 시작할 때 두 기능 선택할 수 있도록 하여서 구현. 

0.5점 특별규칙 지원 및 입력 좌표 오류 처리 (이미 찾아낸 카드 재선택 및 좌표 범위 이외)


1점 보고서 작성. 아래 내용 포함.

1: 문제 정의: 내가 풀 문제 (또는 만들어야할 기능) 를 정의 (예: 입력 받기, 출력 하기, 카드 비교 하기 등등)

2: 프로그램 설계: 위에서 정의한 문제를 해결하기 위한 구체적인 방법 제시

4. 보완점, 소감. 

배운 문법을 총괄해서 적용해 볼 수 있어서 좋았다. 


